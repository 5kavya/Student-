#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME_LENGTH 50

// Define a structure for student nodes
typedef struct Student {
    int id;
    char name[MAX_NAME_LENGTH];
    int present; // 1 for present, 0 for absent
    struct Student* next; // Pointer to the next student node
} Student;

Student* head = NULL; // Head of the linked list

// Function to add a student
void addStudent(int id, char* name) {
    // Check if the student ID already exists
    Student* temp = head;
    while (temp != NULL) {
        if (temp->id == id) {
            printf("Student ID already exists.\n");
            return;
        }
        temp = temp->next;
    }

    // Create a new student node
    Student* newStudent = (Student*)malloc(sizeof(Student));
    newStudent->id = id;
    strcpy(newStudent->name, name);
    newStudent->present = 0; // Default attendance is absent
    newStudent->next = head; // Add the new student at the beginning of the list
    head = newStudent;

    printf("Student added successfully.\n");
}

// Function to delete a student
void deleteStudent(int id) {
    Student *temp = head, *prev = NULL;

    // Search for the student node
    while (temp != NULL && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Student not found.\n");
        return;
    }

    // Remove the student node
    if (prev == NULL) {
        head = temp->next; // If the student is the head of the list
    } else {
        prev->next = temp->next;
    }
    free(temp);
    printf("Student deleted successfully.\n");
}

// Function to mark attendance
void markAttendance(int id, int present) {
    Student* temp = head;

    // Search for the student node
    while (temp != NULL) {
        if (temp->id == id) {
            temp->present = present; // Update the attendance
            printf("Attendance marked successfully.\n");
            return;
        }
        temp = temp->next;
    }
    printf("Student not found.\n");
}

// Function to display attendance
void displayAttendance() {
    Student* temp = head;

    if (temp == NULL) {
        printf("No students found.\n");
        return;
    }

    printf("ID\tName\t\tAttendance\n");
    printf("-----------------------------------\n");
    while (temp != NULL) {
        printf("%d\t%s\t\t%s\n", temp->id, temp->name, temp->present ? "Present" : "Absent");
        temp = temp->next;
    }
}

int main() {
    int choice, id, present;
    char name[MAX_NAME_LENGTH];

    while (1) {
        printf("\nStudent Attendance Management System\n");
        printf("1. Add Student\n");
        printf("2. Delete Student\n");
        printf("3. Mark Attendance\n");
        printf("4. Display Attendance\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter student ID: ");
                scanf("%d", &id);
                printf("Enter student name: ");
                scanf(" %[^\n]", name);
                addStudent(id, name);
                break;

            case 2:
                printf("Enter student ID to delete: ");
                scanf("%d", &id);
                deleteStudent(id);
                break;

            case 3:
                printf("Enter student ID to mark attendance: ");
                scanf("%d", &id);
                printf("Enter 1 for present, 0 for absent: ");
                scanf("%d", &present);
                markAttendance(id, present);
                break;

            case 4:
                displayAttendance();
                break;

            case 5:
                exit(0);
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
